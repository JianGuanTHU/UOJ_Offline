#!/usr/bin/env python
#coding=utf-8

import sys
import os

import judger_class_lib as lib
from uoj_judger_compiler import *
from uoj_judger_tester import *
from uoj_judger_reporter import *
from uoj_judger_config import *

class MyChecker():

	def run(self, config, tester):
		ret = lib.run_program( \
			main_path=config.main_path, \
			result_file_name=config.result_path + "/run_checker_result.txt", \
			input_file_name="/dev/null", \
			output_file_name="/dev/null", \
			error_file_name=config.result_path + "/checker_error.txt", \
			work_path=config.work_path, \
			limit=lib.conf_run_limit("checker", index=tester.num, val=lib.RL_CHECKER_DEFAULT, config=config), \
			readable=[tester.input_file_name, \
					  tester.output_file_name, \
					  tester.answer_file_name,
					 ], \
			para_list=["python3",\
					   config.data_path + "/checker.py",\
					   os.path.abspath(tester.input_file_name), \
					   os.path.abspath(tester.output_file_name), \
					   os.path.abspath(tester.answer_file_name), \
					   ], \
			uoj_offline=("uoj_offline" in config.config))
		if ret.type!=lib.RS_AC or ret.exit_code!=0:
			return lib.RunCheckerResult(type=ret.type, usm=ret.usm, ust=ret.ust, scr=0, \
										info=lib.file_preview(config.result_path + "/checker_error.txt"))
		else:
			R = lib.RunCheckerResult(type=ret.type, usm=ret.usm, ust=ret.ust, scr=0, \
									 info=lib.file_preview(config.result_path + "/checker_error.txt"))
			try:
				F = lib.file_preview(config.result_path + "/checker_error.txt")
				ret.info = F
				E = F.split()
				if E[0] == "ok":
					R.scr = 100
				elif E[0] == 'points':
					R.scr = (int)(100 * float(E[1]) + 0.5)
				else:
					R.scr = 0
				return R
			except:
				print("orz")
				return lib.RunCheckerResult(type=lib.RS_JGF, ust=-1, usm=-1, scr=0, info="Checker Judgment Failed")

if __name__=="__main__":
	main_path = sys.argv[1]
	work_path = sys.argv[2]
	result_path = sys.argv[3]
	data_path = sys.argv[4]

	C = pyjudgerConfig(main_path, work_path, result_path, data_path)
	n = int(C.config["n_tests"])
	R = pyjudgerReporter(C, n)
	Co = pyjudgerCompiler(C)
	T = pyjudger_custom_tester(C, checker=MyChecker())

	R.report_judgement_status("Compiling")
	ret = Co.compile_command("/usr/bin/make")
	if not ret.succeeded:
		R.end_judge_compile_error(info=lib.file_preview(result_path + "/compiler_result.txt"))

	for i in range(n):
		t = i + 1
		R.report_judgement_status("Judging #%d" % t)
		ret = T.test(t) 
		R.add_point_info(ret)

	R.end_judge_ok()
